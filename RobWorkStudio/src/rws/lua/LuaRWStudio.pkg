
$#include <rw/math.hpp>

$#include "LuaRWStudio.hpp"

namespace rwlua { namespace rw {
	class TimedStatePath;
}}

namespace rws { namespace lua { namespace rwstudio {
    /*
  		These are the classes and functions we export.
	*/
	class RobWorkStudio {
	public:
		RobWorkStudio(rws::RobWorkStudio* rws);
	
		void openFile(const std::string& filename);
	
		rw::common::PropertyMap& getPropertyMap();
	
		rwlua::rw::WorkCell getWorkCell();
	
		void setWorkcell(rw::models::WorkCell::Ptr workcell);
	
		rw::proximity::CollisionDetector::Ptr getCollisionDetector();
	
		//rwlibs::drawable::WorkCellGLDrawer* getWorkCellGLDrawer();
	
		const rwlua::rw::TimedStatePath& getTimedStatePath();
	
		void setTimedStatePath(const rwlua::rw::TimedStatePath& path);
	
		void setState(const rwlua::rw::State& state);
	
		rwlua::rw::State getState();
	
		rw::common::Log& log();
	
		void saveViewGL(const std::string& filename);
	
		void updateAndRepaint();
	
	    rwlua::rw::Transform3D getViewTransform();
        
        void setViewTransform(rwlua::rw::Transform3D t3d);
	
		//rws::ViewGL* getView();
	};
	
	RobWorkStudio* getRobWorkStudio();
	
}}}

/*
  We provide a rw module of wrapper functions and utility functions.

  These functions are compiled into the executable, so that the user never has
  to worry about the installation of the rw module.

  Also the user need not know about what namespace all of the above classes are
  actually located in.
*/
$[

  function getState()
    return rws.getRobWorkStudio():getState()
  end

  function setState(state)
    return rws.getRobWorkStudio():setState(state)
  end

  function findDevice(name)
    local wc = rws.getRobWorkStudio():getWorkCell()
    return wc:findDevice(name)
  end

  function getDevice(name)
    local wc = rws.getRobWorkStudio():getWorkCell()
    return wc:findDevice(name)
  end

  function findFrame(name)
    local wc = rws.getRobWorkStudio():getWorkCell()
    return wc:findFrame(name)
  end

  function getFrame(name)
    local wc = rws.getRobWorkStudio():getWorkCell()
    return wc:findFrame(name)
  end

  function getQ(dev)
    local state = getState()
    return dev:getQ(state)
  end

  function setQ(dev, q)
    local state = getState()
    dev:setQ(q, state)
    setState(state)
  end

  function setTransform(frame, trans)
    local state = getState()
    frame:setTransform(trans, state)
    setState(state)
  end


  function wTf(frame)
    return rw.worldTframe(frame, getState() )
  end

  function fTf(frameA, frameB)
    return rw.worldTframe(frameA, frameB, getState() )
  end

$]






