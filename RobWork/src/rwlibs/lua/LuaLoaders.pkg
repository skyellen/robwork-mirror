
$#include <rw/math.hpp>
$#include "LuaMath.hpp"
$#include "LuaModels.hpp"
$#include "LuaSensor.hpp"
$#include "LuaTrajectory.hpp"

$#include "LuaProximity.hpp"
$#include "LuaLoaders.hpp"

$using namespace rwlibs::lua;

namespace rwlibs { namespace lua {
namespace kinematics {
	class State;
	class Frame;
}
namespace math {
	class Q;
	class Vector3D;
}
namespace sensor {
	class Image;
}
namespace models {
	class WorkCell;
	class Device;
}
namespace trajectory {
	class QPath;
	class StatePath;
	class TimedStatePath;
}
namespace loaders {
    /*
  		These are the classes and functions we export.
	*/
	models::WorkCell loadWorkCell(const std::string& filename);
    proximity::CollisionSetup loadCollisionSetup(const std::string& filename);

    // Image
    sensor::Image* loadImage(const std::string& filename);
    void saveAsPGM(sensor::Image* img, const std::string& filename);

    // paths
    void storePath(const trajectory::QPath& path, const std::string& file);
    void storePath(
        const models::WorkCell& workcell,
        const trajectory::StatePath& path,
        const std::string& file);
    void storePath(
        const models::WorkCell& workcell,
        const trajectory::TimedStatePath& path,
        const std::string& file);

    trajectory::QPath* loadQPath(const std::string& file);

    trajectory::StatePath* loadStatePath(
        const models::WorkCell& workcell,
        const std::string& file);

    trajectory::TimedStatePath* loadTimedStatePath(
        const models::WorkCell& workcell,
        const std::string& file);

}}}

/*
  We provide a rw module of wrapper functions and utility functions.

  These functions are compiled into the executable, so that the user never has
  to worry about the installation of the rw module.

  Also the user need not know about what namespace all of the above classes are
  actually located in.
*/
//$[


//$]
