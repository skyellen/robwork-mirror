
$#include <rw/math.hpp>
$#include <rw/common.hpp>

$#include "LuaCommon.hpp"


// Package: rwlibs::lua::common
namespace rwlibs { namespace lua { 

	// Group: Static logging functions
	// (c++ wrappers) functions for writing messages to the static log
	
    //Function: rwlibs::lua::info
	void info(const std::string& msg);
	
	//Function: rwlibs::lua::debug
	void debug(const std::string& msg);
	
	//Function: rwlibs::lua::warn
	void warn(const std::string& msg);
	
	//Function: rwlibs::lua::error
	void error(const std::string& msg);
	

	void lualog(const std::string& msg);

	void sleep(double t);
}}

/*
  We provide a rw module of wrapper functions and utility functions.

  These functions are compiled into the executable, so that the user never has
  to worry about the installation of the rw module.

  Also the user need not know about what namespace all of the above classes are
  actually located in.
*/
$[
	-- Group: Lua functions
	-- Var: print_to_log 
	local print_to_log = true
	
	-- Var: overrides the global print function
    local global_print = print
    
    -- Function: print
	--	Forwards the global print functions to the rw.print functions
    --  whenever print_to_log is defined. 
    function print(...)
        if print_to_log then
	        for i, v in ipairs{...} do
	            if i > 1 then rwlibs.lua.lualog("\t") end
	            rwlibs.lua.lualog(tostring(v))
	        end
	        rwlibs.lua.lualog('\n')
        else
            global_print(...)
        end
    end

    -- Function:
    function reflect( mytableArg )
     local mytable
     if not mytableArg then
      mytable = _G
     else
      mytable = mytableArg
     end
     if type(mytable)=="table" then
      a = {}
      b = { }
      for key,value in pairs( mytable ) do
        if (key:sub(0, 2)=="__") or (key:sub(0, 1)==".") then
        else
          if type(value)=="table" then
              table.insert(b, key)
          else
              table.insert(a, key)
          end
        end
      end
      table.sort(a)
      print("--- Functions ---")
      for i,n in ipairs(a) do print(n .. "()") end

      print("--- Objects/Tables ---")
      for i,n in ipairs(b) do print(n) end
     else
      for key,value in pairs( getmetatable(mytable) ) do
          print(key);
      end
     end
    end

    function help( mytable )
       reflect( mytable )
    end

    function rwlibs.lua.Jacobian:__tostring()
        return rwlibs.lua.toStringJacobian( self )
    end

    function rwlibs.lua.Q:__tostring()
        return rwlibs.lua.toStringQ( self )
    end

$]
