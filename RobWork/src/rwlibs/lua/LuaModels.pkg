
$#include <rw/math.hpp>

$#include "LuaKinematics.hpp"
$#include "LuaModels.hpp"

namespace rwlua {
namespace rw {


	class State;
	class Frame;

	class Q;
	class Vector3D;


    /* Class: rwlua::rw::models::Device
  		These are the classes and functions we export.
  		
  	   See Also:
  	   	<rw::models::Device>
	*/		
	class Device
	{
	public:
		// Constructor: Device 
		Device(rw::models::Device::Ptr device);

		// Function: setQ
        void setQ(const Q& q, State& state) const;
        // Function: getQ
        Q getQ(const State& state) const;

		// Function: getAccLimits
        Q getAccLimits() const;
        void setAccLimits(const Q& lim);

        Q getVelLimits() const;
        void setVelLimits(const Q& lim);

        Q getMinPosLimits() const;
        Q getMaxPosLimits() const;

        void setPosLimits(const Q& min,const Q& max);

        unsigned int getDOF() const;

        std::string getName() const;
        void setName(const std::string& name);

        Frame getBase();
        const Frame getBase() const;
        Frame getEnd();

        rwlua::rw::Transform3D bTf(const Frame* f, const State& state) const;
        rwlua::rw::Transform3D bTe(const State& state) const;
        rwlua::rw::Transform3D wTb(const State& state) const;

        rwlua::rw::Jacobian bJe(const State& state) const;
        rwlua::rw::Jacobian bJf(const Frame* frame, const State& state) const;

		rw::models::Device::Ptr get() const;
		rw::models::Device::Ptr _dev;
	};

    class WorkCell
    {
    public:
    	WorkCell();
    	WorkCell(rw::models::WorkCell::Ptr wc);

        std::string getName();

        Frame getWorldFrame() const;

        Frame findFrame(const std::string& name) const;

        Device findDevice(const std::string& name) const;

        State getDefaultState() const;

    	rw::models::WorkCell::Ptr get() const;
    	rw::models::WorkCell::Ptr get();

    	rw::models::WorkCell::Ptr _wc;
    	std::string __tostring() const;
    };
	
}}

/*
  We provide a rw module of wrapper functions and utility functions.

  These functions are compiled into the executable, so that the user never has
  to worry about the installation of the rw module.

  Also the user need not know about what namespace all of the above classes are
  actually located in.
*/
$[


$]
